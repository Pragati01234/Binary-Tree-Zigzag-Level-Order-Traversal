/* Given a binary tree, return the zigzag level order traversal of its nodes' values. 
 * (ie, from left to right, then right to left for the next level and alternate between).
 * For example:
 * Given binary tree {3,9,20,#,#,15,7},
 *    3
 *   / \
 *  9  20
 *    /  \
 *   15   7
 * return its zigzag level order traversal as:
 * [
 *  [3],
 *  [20,9],
 *  [15,7]
 * ]
 * confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
 * Tags: Tree, Breadth-first Search, Stack
 * Similar Problems: (E) Binary Tree Level Order Traversal
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if (root == nullptr) { return result; }
        queue<TreeNode *> q;
        q.push(root);
        int count = 0;
        while (!q.empty()) {
            int n = q.size();
            vector<int> level(n);
            for (int i = 0; i < n; ++i) {
                auto front = q.front();
                q.pop();
                if (front->left != nullptr) { q.push(front->left); }
                if (front->right != nullptr) { q.push(front->right); }
                level[i] = front->val;
            }
            if (count % 2 != 0) {
                reverse(level.begin(), level.end());
            }
            result.push_back(level);
            ++count;
        }
        return result;
    }
};
